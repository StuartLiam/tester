;; Auto-generated. Do not edit!


(when (boundp 'arc_msgs::ArcTaskAction)
  (if (not (find-package "ARC_MSGS"))
    (make-package "ARC_MSGS"))
  (shadow 'ArcTaskAction (find-package "ARC_MSGS")))
(unless (find-package "ARC_MSGS::ARCTASKACTION")
  (make-package "ARC_MSGS::ARCTASKACTION"))

(in-package "ROS")
;;//! \htmlinclude ArcTaskAction.msg.html


(defclass arc_msgs::ArcTaskAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod arc_msgs::ArcTaskAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance arc_msgs::ArcTaskActionGoal :init))
    ((:action_result __action_result) (instance arc_msgs::ArcTaskActionResult :init))
    ((:action_feedback __action_feedback) (instance arc_msgs::ArcTaskActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; arc_msgs/ArcTaskActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; arc_msgs/ArcTaskActionResult _action_result
    (send _action_result :serialization-length)
    ;; arc_msgs/ArcTaskActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; arc_msgs/ArcTaskActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; arc_msgs/ArcTaskActionResult _action_result
       (send _action_result :serialize s)
     ;; arc_msgs/ArcTaskActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; arc_msgs/ArcTaskActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; arc_msgs/ArcTaskActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; arc_msgs/ArcTaskActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get arc_msgs::ArcTaskAction :md5sum-) "49452b4241bfa0f518631642b87604b7")
(setf (get arc_msgs::ArcTaskAction :datatype-) "arc_msgs/ArcTaskAction")
(setf (get arc_msgs::ArcTaskAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

ArcTaskActionGoal action_goal
ArcTaskActionResult action_result
ArcTaskActionFeedback action_feedback

================================================================================
MSG: arc_msgs/ArcTaskActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
ArcTaskGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: arc_msgs/ArcTaskGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Any task being done by the Task Handler will have the form of this action. This is essentially the TaskRequest.msg except trimmed down to only include parameters. the TaskHandler doesn't care about a tasks id and status, just the task to be done and the info regarding it.

#Goal parameters. Specified at runtime. If you are trying to pass complex data to a task (list of points/etc), you will have to encode it as a string, or however you'd like.
int32 task_id
dynamic_reconfigure/Config parameters

================================================================================
MSG: dynamic_reconfigure/Config
BoolParameter[] bools
IntParameter[] ints
StrParameter[] strs
DoubleParameter[] doubles
GroupState[] groups

================================================================================
MSG: dynamic_reconfigure/BoolParameter
string name
bool value

================================================================================
MSG: dynamic_reconfigure/IntParameter
string name
int32 value

================================================================================
MSG: dynamic_reconfigure/StrParameter
string name
string value

================================================================================
MSG: dynamic_reconfigure/DoubleParameter
string name
float64 value

================================================================================
MSG: dynamic_reconfigure/GroupState
string name
bool state
int32 id
int32 parent

================================================================================
MSG: arc_msgs/ArcTaskActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ArcTaskResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: arc_msgs/ArcTaskResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
bool completed		#Whether or not the task was completed.
int32 task_id #we need to know the id when tasks is returning, since multiple instances of the same task type may return to same callback in task handler. If we don't know the tasks id, we won't be sure what instance it is, and the callback only receives Result info, which doesn't include the task_id outlined for this actions goal.
string final_state 	#Since tasks are based on a state machine, this can contain the final state that was reached upon completion/termination.

================================================================================
MSG: arc_msgs/ArcTaskActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ArcTaskFeedback feedback

================================================================================
MSG: arc_msgs/ArcTaskFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#no feedback message yet




")



(provide :arc_msgs/ArcTaskAction "49452b4241bfa0f518631642b87604b7")


