// Generated by gencpp from file arc_msgs/ArcTaskAction.msg
// DO NOT EDIT!


#ifndef ARC_MSGS_MESSAGE_ARCTASKACTION_H
#define ARC_MSGS_MESSAGE_ARCTASKACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arc_msgs/ArcTaskActionGoal.h>
#include <arc_msgs/ArcTaskActionResult.h>
#include <arc_msgs/ArcTaskActionFeedback.h>

namespace arc_msgs
{
template <class ContainerAllocator>
struct ArcTaskAction_
{
  typedef ArcTaskAction_<ContainerAllocator> Type;

  ArcTaskAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  ArcTaskAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::arc_msgs::ArcTaskActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::arc_msgs::ArcTaskActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::arc_msgs::ArcTaskActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::arc_msgs::ArcTaskAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arc_msgs::ArcTaskAction_<ContainerAllocator> const> ConstPtr;

}; // struct ArcTaskAction_

typedef ::arc_msgs::ArcTaskAction_<std::allocator<void> > ArcTaskAction;

typedef boost::shared_ptr< ::arc_msgs::ArcTaskAction > ArcTaskActionPtr;
typedef boost::shared_ptr< ::arc_msgs::ArcTaskAction const> ArcTaskActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arc_msgs::ArcTaskAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dynamic_reconfigure': ['/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../msg'], 'arc_msgs': ['/home/mute/workspace/arc_ws/src/arc_ros/arc_msgs/msg', '/home/mute/workspace/arc_ws/devel/share/arc_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arc_msgs::ArcTaskAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arc_msgs::ArcTaskAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arc_msgs::ArcTaskAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49452b4241bfa0f518631642b87604b7";
  }

  static const char* value(const ::arc_msgs::ArcTaskAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49452b4241bfa0f5ULL;
  static const uint64_t static_value2 = 0x18631642b87604b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arc_msgs/ArcTaskAction";
  }

  static const char* value(const ::arc_msgs::ArcTaskAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
ArcTaskActionGoal action_goal\n\
ArcTaskActionResult action_result\n\
ArcTaskActionFeedback action_feedback\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskActionGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
ArcTaskGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#Any task being done by the Task Handler will have the form of this action. This is essentially the TaskRequest.msg except trimmed down to only include parameters. the TaskHandler doesn't care about a tasks id and status, just the task to be done and the info regarding it.\n\
\n\
#Goal parameters. Specified at runtime. If you are trying to pass complex data to a task (list of points/etc), you will have to encode it as a string, or however you'd like.\n\
int32 task_id\n\
dynamic_reconfigure/Config parameters\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/Config\n\
BoolParameter[] bools\n\
IntParameter[] ints\n\
StrParameter[] strs\n\
DoubleParameter[] doubles\n\
GroupState[] groups\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/BoolParameter\n\
string name\n\
bool value\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/IntParameter\n\
string name\n\
int32 value\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/StrParameter\n\
string name\n\
string value\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/DoubleParameter\n\
string name\n\
float64 value\n\
\n\
================================================================================\n\
MSG: dynamic_reconfigure/GroupState\n\
string name\n\
bool state\n\
int32 id\n\
int32 parent\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskActionResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
ArcTaskResult result\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
bool completed		#Whether or not the task was completed.\n\
int32 task_id #we need to know the id when tasks is returning, since multiple instances of the same task type may return to same callback in task handler. If we don't know the tasks id, we won't be sure what instance it is, and the callback only receives Result info, which doesn't include the task_id outlined for this actions goal.\n\
string final_state 	#Since tasks are based on a state machine, this can contain the final state that was reached upon completion/termination.\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskActionFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
ArcTaskFeedback feedback\n\
\n\
================================================================================\n\
MSG: arc_msgs/ArcTaskFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#no feedback message yet\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::arc_msgs::ArcTaskAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArcTaskAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arc_msgs::ArcTaskAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arc_msgs::ArcTaskAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::arc_msgs::ArcTaskActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::arc_msgs::ArcTaskActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::arc_msgs::ArcTaskActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARC_MSGS_MESSAGE_ARCTASKACTION_H
