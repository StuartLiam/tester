// Generated by gencpp from file arc_msgs/ArcTaskResult.msg
// DO NOT EDIT!


#ifndef ARC_MSGS_MESSAGE_ARCTASKRESULT_H
#define ARC_MSGS_MESSAGE_ARCTASKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arc_msgs
{
template <class ContainerAllocator>
struct ArcTaskResult_
{
  typedef ArcTaskResult_<ContainerAllocator> Type;

  ArcTaskResult_()
    : completed(false)
    , task_id(0)
    , final_state()  {
    }
  ArcTaskResult_(const ContainerAllocator& _alloc)
    : completed(false)
    , task_id(0)
    , final_state(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _completed_type;
  _completed_type completed;

   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _final_state_type;
  _final_state_type final_state;





  typedef boost::shared_ptr< ::arc_msgs::ArcTaskResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arc_msgs::ArcTaskResult_<ContainerAllocator> const> ConstPtr;

}; // struct ArcTaskResult_

typedef ::arc_msgs::ArcTaskResult_<std::allocator<void> > ArcTaskResult;

typedef boost::shared_ptr< ::arc_msgs::ArcTaskResult > ArcTaskResultPtr;
typedef boost::shared_ptr< ::arc_msgs::ArcTaskResult const> ArcTaskResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arc_msgs::ArcTaskResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dynamic_reconfigure': ['/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../msg'], 'arc_msgs': ['/home/mute/workspace/arc_ws/src/arc_ros/arc_msgs/msg', '/home/mute/workspace/arc_ws/devel/share/arc_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arc_msgs::ArcTaskResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arc_msgs::ArcTaskResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arc_msgs::ArcTaskResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1594f18d1516d447ec066331de31ec36";
  }

  static const char* value(const ::arc_msgs::ArcTaskResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1594f18d1516d447ULL;
  static const uint64_t static_value2 = 0xec066331de31ec36ULL;
};

template<class ContainerAllocator>
struct DataType< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arc_msgs/ArcTaskResult";
  }

  static const char* value(const ::arc_msgs::ArcTaskResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
bool completed		#Whether or not the task was completed.\n\
int32 task_id #we need to know the id when tasks is returning, since multiple instances of the same task type may return to same callback in task handler. If we don't know the tasks id, we won't be sure what instance it is, and the callback only receives Result info, which doesn't include the task_id outlined for this actions goal.\n\
string final_state 	#Since tasks are based on a state machine, this can contain the final state that was reached upon completion/termination.\n\
";
  }

  static const char* value(const ::arc_msgs::ArcTaskResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.completed);
      stream.next(m.task_id);
      stream.next(m.final_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArcTaskResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arc_msgs::ArcTaskResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arc_msgs::ArcTaskResult_<ContainerAllocator>& v)
  {
    s << indent << "completed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.completed);
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "final_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.final_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARC_MSGS_MESSAGE_ARCTASKRESULT_H
